function [R_best,L_all,Shortest_Route,Shortest_Length]=acatsp(C,NC_max,m,Alpha,Beta,Rho,Q)

% 主要符号说明
% C n个城市的坐标，n×2的矩阵    % NC_max 最大迭代次数    % m 蚂蚁个数   
% Alpha 表征信息素重要程度的参数     % Beta 表征启发式因子重要程度的参数    
% Rho 信息素蒸发系数    % Q 信息素增加强度系数     

% 函数内中间量说明
% R_best 各代最佳路线      % L_best 各代最佳路线的长度
%=========================================================================
%%第一步：变量初始化
n=size(C,1);%n表示问题的规模（城市个数）
D=zeros(n,n);%D表示完全图的赋权邻接矩阵
for i=1:n
    for j=1:n
        if i~=j
            D(i,j)=abs((C(i,1)-C(j,1)))+abs((C(i,2)-C(j,2))); 
            %由于北航（学院路、沙河）校内公路基本按照南北东西走向，我们近似（Δx+Δy）为实际距离
        else
            D(i,j)=eps;      %i=j时不计算，应该为0，但后面的启发因子要取倒数，用eps（浮点相对精度）表示
        end
        D(j,i)=D(i,j);   %相对距离是一个对称矩阵
    end
end
Eta=1./D;          %Eta为启发因子，这里设为距离的倒数
Tau=ones(n,n);     %Tau为信息素矩阵
Tabu=zeros(m,n);   %存储并记录路径的生成
NC=1;               %迭代计数器，记录迭代次数
R_best=zeros(NC_max,n,m);       %各代最佳路线
L_all=inf.*ones(NC_max,1);   %各代最佳路线的长度

while NC<=NC_max        %停止条件之一：达到最大迭代次数，停止

%%第二步：将m只蚂蚁放到n个城市上

    Randpos=[];   %随即存取

    for i=1:(ceil(m/n))
        Randpos=[Randpos,randperm(n)];
    end
    Tabu(:,1)=(Randpos(1,1:m))';    %Tabu第一列就是各个蚂蚁的初始位置
%%第三步：m只蚂蚁按概率函数选择下一座城市，完成各自的周游
    for j=2:n     %所在城市不计算
        for i=1:m    
            visited=Tabu(i,1:(j-1)); %记录已访问的城市，避免重复访问
            Will_Visit=zeros(1,n);       %待访问的城市
            ProbForVisit=Will_Visit;                      %待访问城市的选择概率分布
            Jc=1;
            for k=1:n
                if isempty(find(Tabu==k, 1))   %开始时置0
                    Will_Visit(Jc)=k;
                    Jc=Jc+1;                         %访问的城市个数自加1
                end
            end
            Will_Visit(Will_Visit == 0) =[];
            if isempty(Will_Visit)
                break
            end
%下面计算待选城市的概率分布
            for k=1:length(Will_Visit)
                ProbForVisit(k)=(Tau(visited(end),Will_Visit(k))^Alpha)*(Eta(visited(end),Will_Visit(k))^Beta);
            end
            ProbForVisit=ProbForVisit/(sum(ProbForVisit));
%按概率原则选取下一个城市
            Pcum=cumsum(ProbForVisit);     %cumsum，元素累加即求和
            Select=find(Pcum>=rand); %若计算的概率大于原来的就选择这条路线
            to_visit=Will_Visit(Select(1));
            Tabu(i,j)=to_visit;
        end
    end
    if NC>=2
        for i = 1:m
        Tabu(i,:)=R_best(NC-1,:,i);
        end
    end
%%第四步：记录本次迭代最佳路线
    L=zeros(m,1);     %开始距离为0，m*1的列向量
    for i=1:m
        R=Tabu(i,:);
        R(R==0) = [];
        for j=1:(length(R)-1)
            L(i)=L(i)+D(R(j),R(j+1));    %原距离加上第j个城市到第j+1个城市的距离
        end
        L(i)=L(i)+D(R(1),R(length(R)));      %一轮下来后走过的距离
    end
    L_all(NC)=sum(L); 
    if NC==1
        for i = 1:m
            for j = 1:n
                R_best(NC,j,i)=Tabu(i,j);
            end
        end
    else
            if L_all(NC) == min(L_all)
                for i = 1:m
                    for j = 1:n
                        R_best(NC,j,i)=Tabu(i,j);
                    end
                end 
            else R_best(NC,j,i) = R_best(NC-1,j,i);
            end
    end
    NC=NC+1;                      %迭代继续
    
%%第五步：更新信息素
    Delta_Tau=zeros(n,n);        %开始时信息素为n*n的0矩阵
    for i=1:m
        Middle = Tabu(i,:);
        Middle(Middle == 0 ) =[];
        for j=1:(length(Middle)-1)
        Delta_Tau(Middle(j),Middle(j+1))=Delta_Tau(Middle(j),Middle(j+1))+Q/L(i);          
%此次循环在路径（i，j）上的信息素增量
        end
        Delta_Tau(Middle(length(Middle)),Middle(1))=Delta_Tau(Middle(length(Middle)),Middle(1))+Q/L(i);
%此次循环在整个路径上的信息素增量
    end
    Tau=(1-Rho).*Tau+Delta_Tau; %考虑信息素挥发，更新后的信息素
%%第六步：禁忌表清零
    Tabu=zeros(m,n);             %%直到最大迭代次数
end
R_best(:,1:22,:)
%%第七步：输出结果
Pos=find(L_all==min(L_all)); %找到最佳路径（非0为真）
Shortest_Route=R_best(Pos(1),:,:) %最大迭代次数后最佳路径
Shortest_Length=L_all(Pos(1))%最大迭代次数后最短距离
subplot(1,2,1)                  %绘制第一个子图形
DrawRoute(C,Shortest_Route(:,1));%画路线图的子函数
subplot(1,2,2)                  %绘制第二个子图形
plot(L_all)
title('最短距离') ;    %标题

function DrawRoute(C,R)

%%========================================================================
% DrawRoute.m
% 画路线图的子函数
% C Coordinate 节点坐标，由一个N×2的矩阵存储
% R Route 路线
%%=========================================================================
R(R ==0) = [];
R
N=length(R);
scatter(C(:,1),C(:,2));
hold on

plot([C(R(1),1),C(R(N),1)],[C(R(1),2),C(R(N),2)],'g')
hold on
for ii=2:N
    plot([C(R(ii-1),1),C(R(ii),1)],[C(R(ii-1),2),C(R(ii),2)],'g')
    hold on
end
title('旅行商问题优化结果 ')
